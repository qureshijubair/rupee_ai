"""
Django settings for django_rest_project project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^krv%ryc=hjp2ucho%ptml@4e3n6tp_ym=*^$0#i6uj)_bh!)%'

# SECURITY WARNING: don't run with debug turned on in production!
# To access a boolean variable, make it a conditional.
DEBUG = os.environ.get('DEBUG').capitalize() == 'True'

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '0.0.0.0']
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1', 'http://localhost']

# CORS_ALLOWED_ORIGINS = ['http://127.0.0.1', 'http://localhost']

# Enable for production
if os.environ.get('ENVIRONMENT') == 'production':
  SECURE_SSL_REDIRECT = True  # Redirect all HTTP requests to HTTPS  (essential for production)
  SESSION_COOKIE_SECURE = True  # Only send session cookie over HTTPS
  CSRF_COOKIE_SECURE = True      # Only send CSRF cookie over HTTPS
  SECURE_HSTS_SECONDS = 31536000 # Enable HTTP Strict Transport Security (HSTS) (recommended for production)
  SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Include subdomains in HSTS (if applicable)
  SECURE_HSTS_PRELOAD = True # Add your site to the HSTS preload list (optional but recommended)
# Disable for local development
else:
  SECURE_SSL_REDIRECT = False
  SESSION_COOKIE_SECURE = False
  CSRF_COOKIE_SECURE = False

# Application definition

INSTALLED_APPS = [
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',
  'rest_framework',
  'rest_framework.authtoken',
  'corsheaders',
  'chatbot'
]

MIDDLEWARE = [
  'corsheaders.middleware.CorsMiddleware',
  'django.middleware.security.SecurityMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
  'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_rest_project.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

WSGI_APPLICATION = 'django_rest_project.wsgi.application'


# SQLite3 Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': BASE_DIR / 'db.sqlite3',
  }
}

# Postgres AWS DB, with custom schema
# DATABASES = {
#     'default': {
#     'ENGINE': 'django.db.backends.postgresql_psycopg2',
#     'OPTIONS': {
#         'options': '-c search_path=sg_bot_v2'
#     },
#     'NAME': os.getenv('AWS_RDS_DB_NAME'),
#     'USER': os.getenv('AWS_RDS_USERNAME'),
#     'PASSWORD': os.getenv('AWS_RDS_PASSWORD'),
#     'HOST': os.getenv('AWS_RDS_HOST'),
#     'PORT': os.getenv('AWS_RDS_PORT')
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
  {
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
  },
]

AUTHENTICATION_BACKENDS = [
  'django.contrib.auth.backends.ModelBackend',  # Default backend
  # Add other backends if you are using custom ones
]

AUTH_USER_MODEL = 'chatbot.UserInfoRecords'

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
  'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
  'PAGE_SIZE': 5,
  'DEFAULT_PERMISSION_CLASSES': [
    # 'rest_framework.permissions.IsAuthenticated',
  ],
  'DEFAULT_AUTHENTICATION_CLASSES': [
    'rest_framework.authentication.BasicAuthentication',
    'rest_framework.authentication.SessionAuthentication',
    'rest_framework_simplejwt.authentication.JWTAuthentication'
  ],
  'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

SIMPLE_JWT = {
  'USER_ID_FIELD': 'user_id',
}

LOGGING = {
  "version": 1,
  "disable_existing_loggers": False,
  "handlers": {
    "console": {"class": "logging.StreamHandler"},
    "file": {
      "class": "logging.FileHandler",
      "filename": "general.log",
      "formatter": "verbose",
    },
  },
  "loggers": {
    "": {
      "handlers": ["console", "file"],
      "level": os.environ.get("DJANGO_LOG_LEVEL", "INFO"),
    }
  },
  "formatters": {
    "verbose": {
      "format": "{asctime} ({levelname})- {name}- {message}",
      "style": "{",
    }
  },
}